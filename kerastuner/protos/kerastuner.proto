/* Copyright 2019 The KerasTuner Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

syntax = "proto3";

package kerastuner;


enum Sampling {
    NONE = 0;
    LINEAR = 1;
    LOG = 2;
    REVERSE_LOG = 3;
}

message Value {
    oneof kind {
        sint64 int_value = 1;
        double float_value = 2;
        string string_value = 3;
        bool boolean_value = 4;
    }
}

message Float {
    string name = 1;
    double min_value = 2;
    double max_value = 3;
    double step = 4;
    Sampling sampling = 5;
    double default = 6;
    repeated Condition conditions = 7;
}

message Int {
    string name = 1;
    sint64 min_value = 2;
    sint64 max_value = 3;
    sint64 step = 4;
    Sampling sampling = 5;
    sint64 default = 6;
    repeated Condition conditions = 7;
}

message Choice {
    string name = 1;
    repeated Value values = 2;
    Value default = 3;
    bool ordered = 4;
    repeated Condition conditions = 5;
}

message Boolean {
    string name = 1;
    bool default = 2;
    repeated Condition conditions = 3;
}

message Fixed {
    string name = 1;
    Value value = 2;
    repeated Condition conditions = 3;
}

message HyperParameters {
    message Space {
        repeated Float float_space = 1;
        repeated Int int_space = 2;
        repeated Choice choice_space = 3;
        repeated Boolean boolean_space = 4;
        repeated Fixed fixed_space = 5;
    }
    Space space = 1;

    message Values {
        map <string, Value> values = 1;
    }
    Values values = 2;
}

message MetricObservation {
    repeated float value = 1;
    int64 step = 2;
}

message MetricHistory {
    repeated MetricObservation observations = 1;
    bool maximize = 2;
}

message MetricsTracker {
    map<string, MetricHistory> metrics = 1;
}

enum TrialStatus {
    UNKNOWN = 0;
    RUNNING = 1;
    IDLE = 2;
    INVALID = 3;
    STOPPED = 4;
    COMPLETED = 5;
}

message Trial {
    HyperParameters hyperparameters = 1;
    string trial_id = 2;
    TrialStatus status = 3;
    MetricsTracker metrics = 4;

    message Score {
        float value = 1;
        int64 step = 2;
    }
    Score score = 5;
}


message Condition {

    message Parent {
        string name = 1;
        repeated Value values = 2;
    }

    oneof kind {
        Parent parent = 1;
    }
}
