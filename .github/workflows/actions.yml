name: Tests

on:
  push:
    branches: [ master ]
  pull_request:
  release:
    types: [created]

permissions:
  contents: read

jobs:
  build:
    name: Test the code with tf.keras
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Get pip cache dir
        id: pip-cache
        run: |
          python -m pip install --upgrade pip setuptools
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
      - name: Install dependencies
        run: |
          pip install -e ".[tensorflow-cpu,tests]" --progress-bar off --upgrade
          pip install jax[cpu]
      - name: Test with pytest
        run: |
          pytest --cov=keras_tuner --cov-report xml:coverage.xml
      - name: Codecov
        uses: codecov/codecov-action@v3
  multibackend:
    name: Test the code with Keras Core
    strategy:
      fail-fast: false
      matrix:
        backend: [tensorflow, jax, torch]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Get pip cache dir
        id: pip-cache
        run: |
          python -m pip install --upgrade pip setuptools
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
      - name: Install dependencies
        run: |
          pip install -e ".[tensorflow-cpu,tests]" --progress-bar off --upgrade
          pip install torch>=2.0.1+cpu --progress-bar off
          pip install jax[cpu] --progress-bar off
          pip install -e ".[tensorflow-cpu,tests]" --progress-bar off --upgrade
      - name: Test with pytest
        env:
          KERAS_BACKEND: ${{ matrix.backend }}
        run: |
          pytest
  format:
    name: Check the code format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Get pip cache dir
        id: pip-cache
        run: |
          python -m pip install --upgrade pip setuptools
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
      - name: Install dependencies
        run: |
          pip install -e ".[tensorflow-cpu,tests]" --progress-bar off --upgrade
      - name: Lint
        run: bash shell/lint.sh
  guides:
    name: Run the keras.io guides
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Get pip cache dir
        id: pip-cache
        run: |
          python -m pip install --upgrade pip setuptools
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
      - name: Install dependencies
        run: |
          pip install -e ".[tensorflow-cpu,tests]" --progress-bar off --upgrade
      - name: Run the guides
        run: bash shell/run_guides.sh
  deploy:
    needs: [build, format,multibackend]
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel twine
    - name: Build a binary wheel and a source tarball
      run: >-
        python pip_build.py
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_PASSWORD  }}