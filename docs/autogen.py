# -*- coding: utf-8 -*-
import pathlib
import shutil

import keras_autodoc

import kerastuner
from kerastuner.engine.base_tuner import BaseTuner
from kerastuner.engine.oracle import Oracle
from kerastuner.engine.tuner import Tuner
from kerastuner import applications

PAGES = {
    'documentation/tuners.md': [
        kerastuner.BayesianOptimization,
        kerastuner.Hyperband,
        kerastuner.RandomSearch,
        kerastuner.tuners.Sklearn,
        Tuner,
        Tuner.get_best_models,
        Tuner.get_state,
        Tuner.load_model,
        Tuner.on_epoch_begin,
        Tuner.on_batch_begin,
        Tuner.on_batch_end,
        Tuner.on_epoch_end,
        Tuner.run_trial,
        Tuner.save_model,
        Tuner.search,
        Tuner.set_state,
        BaseTuner,
        BaseTuner.get_best_hyperparameters,
        BaseTuner.get_best_models,
        BaseTuner.get_state,
        BaseTuner.load_model,
        BaseTuner.run_trial,
        BaseTuner.save_model,
        BaseTuner.search,
        BaseTuner.set_state
    ],
    'documentation/hypermodels.md': [
        kerastuner.HyperModel,
        kerastuner.HyperModel.build,
        applications.HyperXception,
        applications.HyperResNet
    ],

    'documentation/hyperparameters.md': [
        kerastuner.HyperParameters,
        kerastuner.HyperParameters.Boolean,
        kerastuner.HyperParameters.Choice,
        kerastuner.HyperParameters.Fixed,
        kerastuner.HyperParameters.Float,
        kerastuner.HyperParameters.Int,
        kerastuner.HyperParameters.conditional_scope,
        kerastuner.HyperParameters.get
    ],
    'documentation/oracles.md': [
        'kerastuner.oracles.BayesianOptimization',
        'kerastuner.oracles.Hyperband',
        'kerastuner.oracles.RandomSearch',
        Oracle,
        Oracle._populate_space,
        Oracle._score_trial,
        Oracle.create_trial,
        Oracle.end_trial,
        Oracle.get_best_trials,
        Oracle.get_state,
        Oracle.set_state,
        Oracle.update_trial
    ]
}

kerastuner_dir = pathlib.Path(__file__).resolve().parents[1]


def generate(dest_dir):
    template_dir = kerastuner_dir / 'docs' / 'templates'

    doc_generator = keras_autodoc.DocumentationGenerator(
        PAGES,
        'https://github.com/keras-team/keras-tuner/blob/master',
        template_dir,
        kerastuner_dir / 'examples'
    )
    doc_generator.generate(dest_dir)

    readme = (kerastuner_dir / 'README.md').read_text()
    index = (template_dir / 'index.md').read_text()
    index = index.replace('{{autogenerated}}', readme[readme.find('##'):])
    (dest_dir / 'index.md').write_text(index, encoding='utf-8')
    shutil.copyfile(kerastuner_dir / 'CONTRIBUTING.md',
                    dest_dir / 'contributing.md')


if __name__ == '__main__':
    generate(kerastuner_dir / 'docs' / 'sources')
